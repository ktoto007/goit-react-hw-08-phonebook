{"version":3,"file":"static/js/734.4426b761.chunk.js","mappings":"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","sources":["components/form/FormContaks.styled.jsx","redux/contacts/contactsSelectors.js","components/form/FormContaks.jsx","components/listItem/ListItem.styled.jsx","components/listItem/ListItem.jsx","redux/filter/filterSelectors.js","components/contactList/ContactList.jsx","components/filter/Filter.styled.jsx","components/filter/Filter.jsx","components/modal/Modal.styled.jsx","components/modal/Modal.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nexport const FormLabel = styled.label`\n  display: block;\n  margin-bottom: 10px;\n`;\n\nexport const FormInput = styled(Field)`\n  margin-left: 12px;\n  padding: 8px;\n  font-family: inherit;\n`;\n\nexport const StyledForm = styled(Form)`\n  border: 1px solid black;\n  display: inline-block;\n  padding: 20px;\n  text-align: center;\n`;\n","export const selectContactList = state => state.contacts.contacts;\nexport const selectContactError = state => state.contacts.error;\nexport const selectContactLoading = state => state.contacts.isLoading;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport { object, string } from 'yup';\nimport { selectContactList } from 'redux/contacts/contactsSelectors';\nimport { FormLabel, FormInput, StyledForm } from './FormContaks.styled';\nimport { addContact } from 'redux/contacts/contactOperetion';\n\nexport const FormContaks = () => {\n  const contacts = useSelector(selectContactList);\n  const dispatch = useDispatch();\n\n  const schema = object({\n    name: string().required(),\n    number: string().required(),\n  });\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n    if (\n      contacts.some(\n        ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      alert(`${values.name} is already in contacts`);\n      return;\n    } else {\n      dispatch(addContact({ ...values }));\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <FormLabel htmlFor=\"\">\n          Name\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"\">\n          Phone\n          <FormInput\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormLabel>\n        <button type=\"submit\" className=\"button\">\n          Add contact\n        </button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nexport const ElementContent = styled.span`\n  // margin-right: 10px;\n`;\n\nexport const StyledListItem = styled.li`\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  align-items: center;\n  margin-bottom: 5px;\n  :last-child {\n    margin-bottom: 0;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { removeContact } from 'redux/contacts/contactOperetion';\nimport { ElementContent, StyledListItem } from './ListItem.styled';\n\nexport const ListItem = ({ id, name, number, updateModal }) => {\n  const dispatch = useDispatch();\n  return (\n    <StyledListItem>\n      <ElementContent>\n        {name}: {number}\n      </ElementContent>\n      <button\n        type=\"button\"\n        className=\"button\"\n        id={id}\n        onClick={() => dispatch(removeContact(id))}\n      >\n        Delete\n      </button>\n      <button\n        type=\"button\"\n        className=\"button\"\n        id={id}\n        onClick={() => updateModal(id)}\n      >\n        Update\n      </button>\n    </StyledListItem>\n  );\n};\n\nListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  updateModal: PropTypes.func.isRequired,\n};\n","export const selectFilterParam = state => state.filter.filter;\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ListItem } from 'components/listItem/ListItem';\nimport { selectFilterParam } from 'redux/filter/filterSelectors';\nimport { selectContactList } from 'redux/contacts/contactsSelectors';\n\nexport const ContactList = ({ updateModal }) => {\n  const contacts = useSelector(selectContactList);\n  const filter = useSelector(selectFilterParam);\n\n  const onFilterContact = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <ul>\n      {onFilterContact().map(({ id, name, number }) => (\n        <ListItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          updateModal={updateModal}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  updateModal: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\nexport const FilterInput = styled.input`\n  margin: 8px auto;\n  padding: 8px;\n  font-family: inherit;\n  display: block;\n`;\n","import { useDispatch } from 'react-redux';\nimport { FilterInput } from './Filter.styled';\nimport { filtredContacts } from 'redux/filter/filterSlise';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <label htmlFor=\"\">\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        onChange={e => {\n          dispatch(filtredContacts(e.target.value));\n        }}\n      />\n    </label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalStyles = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n  background-color: beige;\n`;\n","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport { object, string } from 'yup';\nimport PropTypes from 'prop-types';\nimport { selectContactList } from 'redux/contacts/contactsSelectors';\nimport {\n  FormLabel,\n  FormInput,\n  StyledForm,\n} from 'components/form/FormContaks.styled';\nimport { Overlay, ModalStyles } from './Modal.styled';\nimport { updateContact } from 'redux/contacts/contactOperetion';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ id, closeModal }) => {\n  const contacts = useSelector(selectContactList);\n  const dispatch = useDispatch();\n  const { name, number } = contacts.filter(contact => contact.id === id)[0];\n  const schema = object({\n    name: string().required(),\n    number: string().required(),\n  });\n  const initialValues = {\n    name,\n    number,\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  const handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      closeModal();\n    }\n  };\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n    dispatch(updateContact({ id, ...values }));\n    closeModal();\n  };\n\n  const handleBackDrop = e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n    closeModal();\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackDrop}>\n      <ModalStyles>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          onSubmit={handleSubmit}\n        >\n          <StyledForm>\n            <FormLabel htmlFor=\"\">\n              Name\n              <FormInput\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n              />\n            </FormLabel>\n            <FormLabel htmlFor=\"\">\n              Phone\n              <FormInput\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n              />\n            </FormLabel>\n            <button type=\"submit\" className=\"button\">\n              Update contact\n            </button>\n          </StyledForm>\n        </Formik>\n      </ModalStyles>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch /**useSelector**/ } from 'react-redux';\n\nimport { FormContaks } from 'components/form/FormContaks';\nimport { ContactList } from 'components/contactList/ContactList';\nimport { Filter } from 'components/filter/Filter';\nimport { fetchContacts } from 'redux/contacts/contactOperetion';\nimport { Modal } from 'components/modal/Modal';\n\n// import { toast, ToastContainer } from 'react-toastify';\n// import { selectContactError } from 'redux/contacts/contactsSelectors';\n\nconst Contacts = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [contactId, setContactId] = useState(null);\n\n  const updateModal = id => {\n    setShowModal(true);\n    setContactId(id);\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // const error = useSelector(selectContactError);\n  // if (error !== null) {\n  //   alert(error.message);\n  // }\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <FormContaks />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList updateModal={updateModal} />\n      {showModal && <Modal id={contactId} closeModal={closeModal} />}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormLabel","styled","FormInput","Field","StyledForm","Form","selectContactList","state","contacts","FormContaks","useSelector","dispatch","useDispatch","schema","object","name","string","required","number","initialValues","validationSchema","onSubmit","values","resetForm","some","toLowerCase","alert","addContact","htmlFor","type","pattern","title","className","ElementContent","StyledListItem","ListItem","id","updateModal","onClick","removeContact","selectFilterParam","filter","ContactList","contact","includes","map","FilterInput","Filter","onChange","e","filtredContacts","target","value","Overlay","ModalStyles","modalRoot","document","querySelector","Modal","closeModal","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","currentTarget","updateContact","useState","showModal","setShowModal","contactId","setContactId","fetchContacts"],"sourceRoot":""}